matrix
makeCacheMatrix <- function(x=matrix()) {
inv <- NULL
set <- function(y) {
x <<-y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
matrix <- makeCacheMatrix(c(-1,-1,2,1))
matrix$getinverse()
cacheSolve(matrix)
matrix$get()
class(matrix$get())
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- as.matrix(x$get())
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(matrix)
matrix$get()
class(matrix$get())
as.matrix(matrix$get())
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- as.matrix(x$get(), 2, 2)
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(matrix)
as.matrix(matrix$get(), 2,2)
matrix(matrix$get(), 2,2)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- matrix(x$get(), 2, 2)
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(matrix)
matrix$getinverse
matrix$getinverse()
cacheSolve(matrix)
makeCacheMatrix <- function(x=matrix()) {
inv <- NULL
set <- function(y) {
x <<-y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- matrix(x$get(), 2, 2)
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
matrix <- makeCacheMatrix(c(-1, -1, 2, 1), 2, 2)
matrix <- makeCacheMatrix(matrix_sq2)
matrix$getinverse()
matrix$get()
matrix$set()
makeCacheMatrix <- function(x=matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
matrix$set()
matrix$setinverse
matrix$setinverse()
matrix$getinverse()
cacheSolve(matrix)
matrix$getinverse
matrix$getinverse()
cacheSolve(matrix)
a <- makeVector(c(1,3,5,7,9))
a
a$set
a$set()
a$get()
a$setmean()
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
matrix_3 <- (c(1,2,3,0,1,4,5,6,0), 3, 3)
matrix_3 <- matrix(c(1,2,3,0,1,4,5,6,0), 3, 3)
matrix_3
matrix_3 <- matrix(c(1,0,5,2,1,6,3,4,0), 3, 3)
matrix_3
det(matrix_3)
matrix <- makeCacheMatrix(matrix_3)
matrix$get()
matrix$getinverse()
cacheMatrix(matrix)
cacheSolve(matrix)
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cacheSolve(matrix)
matrix$getinverse()
matrix_33 <- matrix(c(1,0,5,2,1,6,3,4,0))
matrix_33
matrix_33 <- matrix(c(1,0,5,2,1,6,3,4,0), 3, 3)
matrix_33
matrix <- makeCacheMatrix(matrix_33)
matrix$get
matrix$get()
matrix$getinverse()
cacheSolve(matrix)
matrix$getinverse()
cacheSolve(matrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
matrix <- makeCacheMatrix(matrix_33)
matrix$get()
matrix$getinverse()
cacheSolve(matrix)
matrix$getinverse()
cacheSolve(matrix)
class(matrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
matrix_2 <- matrix(c(-1,-1,2,1), 2, 2)
matrix_2
matrix <- makeCacheMatrix(matrix_2)
matrix$get
matrix$get()
makeCacheMatrix <- function(x = matrix()) {
Minv<-NULL               # sets inverse to null in defining envrionment
set<-function(y) {       # creates new matrix in globalEnv and sets inverse to null
x<<-y
Minv<<-NULL
}
get<-function() x        # function to get original matrix
setInv<-function(matInv) Minv<<-matInv # function to store calculated inverse in globalEnv
getInv<-function() Minv  # function to retrieve stored inverse matrix
list(set=set, get=get, setInv=setInv, getInv=getInv)  # list matrix object returned with four functions as elements
}
cacheSolve <- function(x, ...) {
matInv<-x$getInv()          # gets stored inverse matrix
if (!is.null(matInv)) {     # if a stored inverse exists - returns it
message("getting the cached inverse")
return(matInv)
}
mat<-x$get()                # otherwise, gets original matrix
matInv<-solve(mat, ...)     # calculates the inverse
x$setInv(matInv)            # stores in inverse in the matrix list object
matInv                      # returns the inverse
}
matrix <- makeCacheMatrix(matrix_2)
matrix$get()
matrix$getInv()
cacheSolve(matrix_2)
cacheSolve(matrix)
cacheSolve(matrix)
matrix$getInv()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInv <- function(inversion) inv <<- inversion
getInv <- function() inv
list(set = set, get = get, setInv = setInv, getInv = getInv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## if x is a regular matrix, make it cacheMatrix first.
## this won't help performance, since x is never returned,
## but the following code would still work, without issuing errors
if(is.matrix(x)) x = makeCacheMatrix(x)
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat)
x$setInv(inv)
inv
}
matrix <- makeCacheMatrix(matrix_2)
matrix$get()
matrix$getInv()
cacheSolve(matrix)
cacheSolve(matrix_2)
cacheSolve(matrix)
matrix$getInv()
?readLines()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?trellis.par.set()
?splom()
?print.trellis()
library(datasets)
data(airquality)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, date=airquality)
qplot(Wind, Ozone, data=airquality, facets=.~factor(Month))
airquality = transform(airquality, Month=factor(Month))
qplot(Wind, Ozone, data=airquality, facets=.~Month)
qplot(Wind, Ozone, data=airquality, geom="smooth")
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data=movies)
qplot(votes, rating, data=movies) + geom_smooth()
qplot(votes, rating, data=movies, smooth="loess")
qplot(votes, rating, data=movies) + stats_smooth("loess")
qplot(votes, rating, data=movies, panel=panel.loess)
setwd("~/Desktop/DC/Coursera/Reproducible Research/Assignment 1")
setwd("~/Desktop/DC/Coursera/Reproducible Research/RepData_PeerAssessment1")
?unz
unz("activity.zip", activty.csv, open="r")
unz("activity.zip", activity.csv, open="r")
unz("activity.zip", "activity.csv", open="r")
activity <- read.csv("activity.csv")
activity <- unz("activity.zip", "activity.csv", open="r")
activity <- read.csv(unz("activity.zip", "activity.csv", open="r"))
activity <- read.csv(unz(activity.zip, "activity.csv"))
activity <- read.csv(unz("activity.zip", "activity.csv"))
?lubridate
library(lubridate)
?lubridate
library(plyr)
avgInterval <- aggregate(activity[ ,1], list(activity$interval), mean, na.rm=TRUE)
colnames(avgInterval) <- c("Interval", "Mean.Steps")
avgInterval <- mutate(avgInterval, Interval=c(1:288))
plot(avgInterval$Interval, avgInterval$Mean.Steps, type="l", xlim=c(1,288), ylim=c(0, 210), main="Mean Steps per 5-Minute Interval", xlab="Interval", ylab="Mean Number of Steps")
summary(avgInterval)
avgInterval <- aggregate(activity[ ,1], list(activity$interval), mean, na.rm=TRUE)
colnames(avgInterval) <- c("Interval", "Mean.Steps")
plot(avgInterval$Interval, avgInterval$Mean.Steps, type="l", ylim=c(0, 210), main="Mean Steps per 5-Minute Interval", xlab="Interval", ylab="Mean Number of Steps")
avgInterval <- mutate(avgInterval, Interval=c(1:288))
plot(avgInterval$Interval, avgInterval$Mean.Steps, type="l", xlim=c(1,288), ylim=c(0, 210), main="Mean Steps per 5-Minute Interval", xlab="Interval", ylab="Mean Number of Steps")
head(avgInterval)
tail(avgInterval)
avgInterval[which(avgInterval$Mean.Steps==max(avgInterval$Mean.Steps)), ]
avgInterval2 <- aggregate(activity[ ,1], list(activity$interval), mean, na.rm=TRUE)
colnames(avgInterval) <- c("Interval", "Mean.Steps")
head(avgInterval2)
avgInterval2 <- aggregate(activity[ ,1], list(activity$interval), mean, na.rm=TRUE)
colnames(avgInterval2) <- c("Interval", "Mean.Steps")
head(avgInterval2)
avgInterval2[5:15, ]
head(activity)
activity <- mutate(activity, interval=c(1:288))
head(activity)
activity[285:295, ]
activity[575:580, ]
tail(activity)
avgInterval <- aggregate(activity[ ,1], list(activity$interval), mean, na.rm=TRUE)
colnames(avgInterval) <- c("Interval", "Mean.Steps")
plot(avgInterval$Interval, avgInterval$Mean.Steps, type="l", xlim=c(1,288), ylim=c(0, 210), main="Mean Steps per 5-Minute Interval", xlab="Interval", ylab="Mean Number of Steps")
head(activityAllValues)
head(activity)
missingData <- activity[which(is.na(activity$steps)), ]
head(missingData)
tail(missingData)
activityAllValues <- activity
for (i in 1:17568) {
if activityAllValues[i, ] %in% missingData {
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval])
}}
head(activityAllValues)
head(activity)
tail(activity)
tail(activityAllValues)
head(missingData)
summary(missingData)
str(missingData)
?mutate
activityAllValues <- activity
if (activityAllValues$date && activityAllValues$interval) %in% missingData {
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval])
}
head(activityAllValues)
activityAllValues <- activity
for (activityAllValues$date && activityAllValues$interval) %in% missingData {
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval])
}
head(activityAllValues)
activityAllValues <- activity
if is.na(activityAllValues$steps)
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval])
head(activityAllValues)
avgInterval$Mean.Steps
avgInterval$Mean.Steps[which(activityAllValues$interval==1)]
avgInterval$Mean.Steps[which(activityAllValues$interval==10)]
activityAllValues <- activity
for (i in 17568) {
if is.na(activityAllValues$steps)
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
}
activityAllValues <- activity
for (i in 17568) {
if is.na(activityAllValues$steps[i])
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
}
activityAllValues <- activity
is.na(activityAllValues$steps[i])
is.na(activityAllValues$steps)
activityAllValues <- activity
for (i in 17568) {
if is.na(activityAllValues$steps[i]) {
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
}
activityAllValues <- activity
for (i in 1:17568) {
if is.na(activityAllValues$steps[i]) {
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
}
activityAllValues <- activity
for (i in 1:17568) {
if is.na(activityAllValues$steps[i]) {
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
}}
activityAllValues <- activity
for (i in 1:17568) {
if is.na(activityAllValues$steps[i])
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
}
activityAllValues <- activity
if is.na(activityAllValues$steps[i])
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
activityAllValues <- activity
for (i in 1:17568)
if is.na(activityAllValues$steps[i])
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
activityAllValues$steps[1]
activityAllValues$steps[10]
activityAllValues$steps[100]
activityAllValues$steps[95]
activityAllValues$steps[72]
activityAllValues$steps[37]
activityAllValues$steps[7533]
activityAllValues$steps[7540]
activityAllValues$steps[7558]
activityAllValues$steps[9787]
summary(activityAlLValues)
summary(activityAllValues)
?transform
for (n in 1:17568) {
if is.na(activityAllValues$steps[n])
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[n]])
}
activityAllValues <- activity
for (i %in% missingData) {
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[n]])
}
for (i %in% missingData) {
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
}
activityAllValues <- activity
for (i %in% missingData) {
transform(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
}
for (missingData[i]) {
transform(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
}
for (i in missingData) {
transform(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
}
head(missingData)
for (missingData[i, ]) {
transform(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
}
activityAllValues <- activity
activityAllValues <- activity
for (i in 1:17568) {
if is.na(activityAllValues$steps) {
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
}
}
for (i in 1:17568) {
if is.na(activityAllValues$steps[i]) {
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval[i]])
}
}
activityAllValues <- activity
activityAllValues <- activity
for (i in 1:17568) {
if is.na(activityAllValues$steps[i]) {
activityAllValues$steps = avgInterval$Mean.Steps[activityAllValues$interval[i]
}
}
for (i in 1:17568) {
if is.na(activityAllValues$steps[i]) {
activityAllValues$steps = avgInterval$Mean.Steps[activityAllValues$interval[i]]
}
}
for (i in 1:17568) {
if activityAllValues$steps[i] == NA {
activityAllValues$steps = avgInterval$Mean.Steps[activityAllValues$interval[i]]
}
}
for (i in 1:17568) {
if activityAllValues$steps[i] == NA {
activityAllValues$steps[i] = avgInterval$Mean.Steps[activityAllValues$interval[i]]
}
}
for (i in 1:17568) {
if is.na(activityAllValues$steps) {
activityAllValues$steps[i] = avgInterval$Mean.Steps[activityAllValues$interval[i]]
}
}
activityAllValues <- activity
for activityAllValues[which(is.na(activityAllValues$steps)), ] {
mutate(activityAllValues, steps=avgInterval$Mean.Steps[activityAllValues$interval])
}
head(activityAllValues)
for activityAllValues[which(is.na(activityAllValues$steps)), ] {
activityAllValues$steps = avgInterval$Mean.Steps[activityAllValues$interval])
}
for activityAllValues[which(is.na(activityAllValues$steps)), ] {
activityAllValues$steps = avgInterval$Mean.Steps[activityAllValues$interval]
}
activityAllValues <- activity
for activityAllValues[which(is.na(activityAllValues$steps)), ] {
activityAllValues$steps = avgInterval$Mean.Steps[activityAllValues$interval]
}
activityAllValues <- activity
for activityAllValues$steps[which(is.na(activityAllValues$steps)) {
activityAllValues$steps = avgInterval$Mean.Steps[activityAllValues$interval]
}
if is.na(activityAllValues$steps)
activityAllValues$steps = avgInterval$Mean.Steps[activityAllValues$interval]
